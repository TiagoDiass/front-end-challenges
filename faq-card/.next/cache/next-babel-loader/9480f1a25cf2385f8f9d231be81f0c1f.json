{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.default = Image;\n\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _head = _interopRequireDefault(require(\"../next-server/lib/head\"));\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined];\nconst loaders = new Map([['imgix', imgixLoader], ['cloudinary', cloudinaryLoader], ['akamai', akamaiLoader], ['default', defaultLoader]]);\nconst VALID_LAYOUT_VALUES = ['fill', 'fixed', 'intrinsic', 'responsive', undefined];\nconst imageData = process.env.__NEXT_IMAGE_OPTS;\nconst {\n  deviceSizes: configDeviceSizes,\n  imageSizes: configImageSizes,\n  loader: configLoader,\n  path: configPath,\n  domains: configDomains\n} = imageData; // sort smallest to largest\n\nconst allSizes = [...configDeviceSizes, ...configImageSizes];\nconfigDeviceSizes.sort((a, b) => a - b);\nallSizes.sort((a, b) => a - b);\nlet cachedObserver;\n\nfunction getObserver() {\n  const IntersectionObserver = false ? window.IntersectionObserver : null; // Return shared instance of IntersectionObserver if already created\n\n  if (cachedObserver) {\n    return cachedObserver;\n  } // Only create shared IntersectionObserver if supported in browser\n\n\n  if (!IntersectionObserver) {\n    return undefined;\n  }\n\n  return cachedObserver = new IntersectionObserver(entries => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        let lazyImage = entry.target;\n        unLazifyImage(lazyImage);\n        cachedObserver.unobserve(lazyImage);\n      }\n    });\n  }, {\n    rootMargin: '200px'\n  });\n}\n\nfunction unLazifyImage(lazyImage) {\n  if (lazyImage.dataset.src) {\n    lazyImage.src = lazyImage.dataset.src;\n  }\n\n  if (lazyImage.dataset.srcset) {\n    lazyImage.srcset = lazyImage.dataset.srcset;\n  }\n\n  lazyImage.style.visibility = 'visible';\n  lazyImage.classList.remove('__lazy');\n}\n\nfunction getSizes(width, layout) {\n  if (typeof width !== 'number' || layout === 'fill' || layout === 'responsive') {\n    return {\n      sizes: configDeviceSizes,\n      kind: 'w'\n    };\n  }\n\n  const sizes = [...new Set([width, width * 2, width * 3].map(w => allSizes.find(p => p >= w) || allSizes[allSizes.length - 1]))];\n  return {\n    sizes,\n    kind: 'x'\n  };\n}\n\nfunction computeSrc(src, unoptimized, layout, width, quality) {\n  if (unoptimized) {\n    return src;\n  }\n\n  const {\n    sizes\n  } = getSizes(width, layout);\n  const largest = sizes[sizes.length - 1];\n  return callLoader({\n    src,\n    width: largest,\n    quality\n  });\n}\n\nfunction callLoader(loaderProps) {\n  const load = loaders.get(configLoader) || defaultLoader;\n  return load((0, _extends2.default)({\n    root: configPath\n  }, loaderProps));\n}\n\nfunction generateSrcSet({\n  src,\n  unoptimized,\n  layout,\n  width,\n  quality\n}) {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  if (unoptimized) {\n    return undefined;\n  }\n\n  const {\n    sizes,\n    kind\n  } = getSizes(width, layout);\n  return sizes.map((size, i) => `${callLoader({\n    src,\n    width: size,\n    quality\n  })} ${kind === 'w' ? size : i + 1}${kind}`).join(', ');\n}\n\nfunction generatePreload({\n  src,\n  unoptimized = false,\n  layout,\n  width,\n  sizes,\n  quality\n}) {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return /*#__PURE__*/_react.default.createElement(_head.default, null, /*#__PURE__*/_react.default.createElement(\"link\", {\n    rel: \"preload\",\n    as: \"image\",\n    href: computeSrc(src, unoptimized, layout, width, quality) // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n    ,\n    imagesrcset: generateSrcSet({\n      src,\n      unoptimized,\n      layout,\n      width,\n      quality\n    }),\n    imagesizes: sizes\n  }));\n}\n\nfunction getInt(x) {\n  if (typeof x === 'number') {\n    return x;\n  }\n\n  if (typeof x === 'string') {\n    return parseInt(x, 10);\n  }\n\n  return undefined;\n}\n\nfunction Image(_ref) {\n  let {\n    src,\n    sizes,\n    unoptimized = false,\n    priority = false,\n    loading,\n    className,\n    quality,\n    width,\n    height\n  } = _ref,\n      all = (0, _objectWithoutPropertiesLoose2.default)(_ref, [\"src\", \"sizes\", \"unoptimized\", \"priority\", \"loading\", \"className\", \"quality\", \"width\", \"height\"]);\n  const thisEl = (0, _react.useRef)(null);\n  let rest = all;\n  let layout = sizes ? 'responsive' : 'intrinsic';\n  let unsized = false;\n\n  if ('unsized' in rest) {\n    unsized = Boolean(rest.unsized); // Remove property so it's not spread into image:\n\n    delete rest['unsized'];\n  } else if ('layout' in rest) {\n    // Override default layout if the user specified one:\n    if (rest.layout) layout = rest.layout; // Remove property so it's not spread into image:\n\n    delete rest['layout'];\n  }\n\n  if (true) {\n    if (!src) {\n      throw new Error(`Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        width,\n        height,\n        quality\n      })}`);\n    }\n\n    if (!VALID_LAYOUT_VALUES.includes(layout)) {\n      throw new Error(`Image with src \"${src}\" has invalid \"layout\" property. Provided \"${layout}\" should be one of ${VALID_LAYOUT_VALUES.map(String).join(',')}.`);\n    }\n\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(`Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(String).join(',')}.`);\n    }\n\n    if (priority && loading === 'lazy') {\n      throw new Error(`Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`);\n    }\n\n    if (unsized) {\n      throw new Error(`Image with src \"${src}\" has deprecated \"unsized\" property, which was removed in favor of the \"layout='fill'\" property`);\n    }\n  }\n\n  let lazy = loading === 'lazy';\n\n  if (!priority && typeof loading === 'undefined') {\n    lazy = true;\n  }\n\n  if (false && !window.IntersectionObserver) {\n    // Rendering client side on browser without intersection observer\n    lazy = false;\n  }\n\n  (0, _react.useEffect)(() => {\n    const target = thisEl.current;\n\n    if (target && lazy) {\n      const observer = getObserver();\n\n      if (observer) {\n        observer.observe(target);\n        return () => {\n          observer.unobserve(target);\n        };\n      } else {\n        //browsers without intersection observer\n        unLazifyImage(target);\n      }\n    }\n  }, [thisEl, lazy]);\n  const widthInt = getInt(width);\n  const heightInt = getInt(height);\n  const qualityInt = getInt(quality);\n  let wrapperStyle;\n  let sizerStyle;\n  let sizerSvg;\n  let imgStyle = {\n    visibility: lazy ? 'hidden' : 'visible',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    boxSizing: 'border-box',\n    padding: 0,\n    border: 'none',\n    margin: 'auto',\n    display: 'block',\n    width: 0,\n    height: 0,\n    minWidth: '100%',\n    maxWidth: '100%',\n    minHeight: '100%',\n    maxHeight: '100%'\n  };\n\n  if (typeof widthInt !== 'undefined' && typeof heightInt !== 'undefined' && layout !== 'fill') {\n    // <Image src=\"i.png\" width=\"100\" height=\"100\" />\n    const quotient = heightInt / widthInt;\n    const paddingTop = isNaN(quotient) ? '100%' : `${quotient * 100}%`;\n\n    if (layout === 'responsive') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"responsive\" />\n      wrapperStyle = {\n        display: 'block',\n        overflow: 'hidden',\n        position: 'relative',\n        boxSizing: 'border-box',\n        margin: 0\n      };\n      sizerStyle = {\n        display: 'block',\n        boxSizing: 'border-box',\n        paddingTop\n      };\n    } else if (layout === 'intrinsic') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"intrinsic\" />\n      wrapperStyle = {\n        display: 'inline-block',\n        maxWidth: '100%',\n        overflow: 'hidden',\n        position: 'relative',\n        boxSizing: 'border-box',\n        margin: 0\n      };\n      sizerStyle = {\n        boxSizing: 'border-box',\n        display: 'block',\n        maxWidth: '100%'\n      };\n      sizerSvg = `<svg width=\"${widthInt}\" height=\"${heightInt}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`;\n    } else if (layout === 'fixed') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"fixed\" />\n      wrapperStyle = {\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        position: 'relative',\n        width: widthInt,\n        height: heightInt\n      };\n    }\n  } else if (typeof widthInt === 'undefined' && typeof heightInt === 'undefined' && layout === 'fill') {\n    // <Image src=\"i.png\" layout=\"fill\" />\n    wrapperStyle = {\n      display: 'block',\n      overflow: 'hidden',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      boxSizing: 'border-box',\n      margin: 0\n    };\n  } else {\n    // <Image src=\"i.png\" />\n    if (true) {\n      throw new Error(`Image with src \"${src}\" must use \"width\" and \"height\" properties or \"layout='fill'\" property.`);\n    }\n  } // Generate attribute values\n\n\n  const imgSrc = computeSrc(src, unoptimized, layout, widthInt, qualityInt);\n  const imgSrcSet = generateSrcSet({\n    src,\n    unoptimized,\n    layout,\n    width: widthInt,\n    quality: qualityInt\n  });\n  let imgAttributes;\n\n  if (!lazy) {\n    imgAttributes = {\n      src: imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes.srcSet = imgSrcSet;\n    }\n  } else {\n    imgAttributes = {\n      'data-src': imgSrc\n    };\n\n    if (imgSrcSet) {\n      imgAttributes['data-srcset'] = imgSrcSet;\n    }\n\n    className = className ? className + ' __lazy' : '__lazy';\n  } // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n\n\n  const shouldPreload = priority && true;\n\n  if (unsized) {\n    wrapperStyle = undefined;\n    sizerStyle = undefined;\n    imgStyle = undefined;\n  }\n\n  return /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: wrapperStyle\n  }, shouldPreload ? generatePreload({\n    src,\n    layout,\n    unoptimized,\n    width: widthInt,\n    sizes,\n    quality: qualityInt\n  }) : null, sizerStyle ? /*#__PURE__*/_react.default.createElement(\"div\", {\n    style: sizerStyle\n  }, sizerSvg ? /*#__PURE__*/_react.default.createElement(\"img\", {\n    style: {\n      maxWidth: '100%',\n      display: 'block'\n    },\n    alt: \"\",\n    \"aria-hidden\": true,\n    role: \"presentation\",\n    src: `data:image/svg+xml;charset=utf-8,${sizerSvg}`\n  }) : null) : null, /*#__PURE__*/_react.default.createElement(\"img\", Object.assign({}, rest, imgAttributes, {\n    decoding: \"async\",\n    className: className,\n    sizes: sizes,\n    ref: thisEl,\n    style: imgStyle\n  })));\n} //BUILT IN LOADERS\n\n\nfunction normalizeSrc(src) {\n  return src[0] === '/' ? src.slice(1) : src;\n}\n\nfunction imgixLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  // Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300\n  const params = ['auto=format', 'fit=max', 'w=' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q=' + quality);\n  }\n\n  if (params.length) {\n    paramsString = '?' + params.join('&');\n  }\n\n  return `${root}${normalizeSrc(src)}${paramsString}`;\n}\n\nfunction akamaiLoader({\n  root,\n  src,\n  width\n}) {\n  return `${root}${normalizeSrc(src)}?imwidth=${width}`;\n}\n\nfunction cloudinaryLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  // Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit/turtles.jpg\n  const params = ['f_auto', 'c_limit', 'w_' + width];\n  let paramsString = '';\n\n  if (quality) {\n    params.push('q_' + quality);\n  }\n\n  if (params.length) {\n    paramsString = params.join(',') + '/';\n  }\n\n  return `${root}${paramsString}${normalizeSrc(src)}`;\n}\n\nfunction defaultLoader({\n  root,\n  src,\n  width,\n  quality\n}) {\n  if (true) {\n    const missingValues = []; // these should always be provided but make sure they are\n\n    if (!src) missingValues.push('src');\n    if (!width) missingValues.push('width');\n\n    if (missingValues.length > 0) {\n      throw new Error(`Next Image Optimization requires ${missingValues.join(', ')} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify({\n        src,\n        width,\n        quality\n      })}`);\n    }\n\n    if (src && !src.startsWith('/') && configDomains) {\n      let parsedSrc;\n\n      try {\n        parsedSrc = new URL(src);\n      } catch (err) {\n        console.error(err);\n        throw new Error(`Failed to parse \"${src}\" in \"next/image\", if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`);\n      }\n\n      if (!configDomains.includes(parsedSrc.hostname)) {\n        throw new Error(`Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` + `See more info: https://err.sh/nextjs/next-image-unconfigured-host`);\n      }\n    }\n  }\n\n  return `${root}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`;\n}","map":{"version":3,"sources":["../../client/image.tsx"],"names":["VALID_LOADING_VALUES","loaders","VALID_LAYOUT_VALUES","imageData","process","deviceSizes","imageSizes","loader","path","domains","allSizes","configDeviceSizes","a","IntersectionObserver","window","cachedObserver","entries","entry","lazyImage","unLazifyImage","rootMargin","layout","sizes","kind","width","w","p","getSizes","largest","callLoader","load","root","i","unoptimized","computeSrc","generateSrcSet","parseInt","priority","all","thisEl","rest","unsized","Boolean","JSON","src","loading","lazy","target","observer","getObserver","widthInt","getInt","heightInt","qualityInt","imgStyle","visibility","position","top","left","bottom","right","boxSizing","padding","border","margin","display","height","minWidth","maxWidth","minHeight","maxHeight","quotient","paddingTop","isNaN","wrapperStyle","overflow","sizerStyle","sizerSvg","imgSrc","imgSrcSet","quality","imgAttributes","className","shouldPreload","generatePreload","params","paramsString","normalizeSrc","missingValues","parsedSrc","console","configDomains","hostname","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { ReactElement, useEffect, useRef } from 'react'\nimport Head from '../next-server/lib/head'\n\nconst VALID_LOADING_VALUES = ['lazy', 'eager', undefined] as const\ntype LoadingValue = typeof VALID_LOADING_VALUES[number]\n\nconst loaders = new Map<LoaderKey, (props: LoaderProps) => string>([\n  ['imgix', imgixLoader],\n  ['cloudinary', cloudinaryLoader],\n  ['akamai', akamaiLoader],\n  ['default', defaultLoader],\n])\n\ntype LoaderKey = 'imgix' | 'cloudinary' | 'akamai' | 'default'\n\nconst VALID_LAYOUT_VALUES = [\n  'fill',\n  'fixed',\n  'intrinsic',\n  'responsive',\n  undefined,\n] as const\ntype LayoutValue = typeof VALID_LAYOUT_VALUES[number]\n\ntype ImageData = {\n  deviceSizes: number[]\n  imageSizes: number[]\n  loader: LoaderKey\n  path: string\n  domains?: string[]\n}\n\ntype ImageProps = Omit<\n  JSX.IntrinsicElements['img'],\n  'src' | 'srcSet' | 'ref' | 'width' | 'height' | 'loading'\n> & {\n  src: string\n  quality?: number | string\n  priority?: boolean\n  loading?: LoadingValue\n  unoptimized?: boolean\n} & (\n    | {\n        width?: never\n        height?: never\n        /** @deprecated Use `layout=\"fill\"` instead */\n        unsized: true\n      }\n    | { width?: never; height?: never; layout: 'fill' }\n    | {\n        width: number | string\n        height: number | string\n        layout?: Exclude<LayoutValue, 'fill'>\n      }\n  )\n\nconst imageData: ImageData = process.env.__NEXT_IMAGE_OPTS as any\nconst {\n  deviceSizes: configDeviceSizes,\n  imageSizes: configImageSizes,\n  loader: configLoader,\n  path: configPath,\n  domains: configDomains,\n} = imageData\n// sort smallest to largest\nconst allSizes = [...configDeviceSizes, ...configImageSizes]\nconfigDeviceSizes.sort((a, b) => a - b)\nallSizes.sort((a, b) => a - b)\n\nlet cachedObserver: IntersectionObserver\n\nfunction getObserver(): IntersectionObserver | undefined {\n  const IntersectionObserver =\n    typeof window !== 'undefined' ? window.IntersectionObserver : null\n  // Return shared instance of IntersectionObserver if already created\n  if (cachedObserver) {\n    return cachedObserver\n  }\n\n  // Only create shared IntersectionObserver if supported in browser\n  if (!IntersectionObserver) {\n    return undefined\n  }\n  return (cachedObserver = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          let lazyImage = entry.target as HTMLImageElement\n          unLazifyImage(lazyImage)\n          cachedObserver.unobserve(lazyImage)\n        }\n      })\n    },\n    { rootMargin: '200px' }\n  ))\n}\n\nfunction unLazifyImage(lazyImage: HTMLImageElement): void {\n  if (lazyImage.dataset.src) {\n    lazyImage.src = lazyImage.dataset.src\n  }\n  if (lazyImage.dataset.srcset) {\n    lazyImage.srcset = lazyImage.dataset.srcset\n  }\n  lazyImage.style.visibility = 'visible'\n  lazyImage.classList.remove('__lazy')\n}\n\nfunction getSizes(\n  width: number | undefined,\n  layout: LayoutValue\n): { sizes: number[]; kind: 'w' | 'x' } {\n  if (\n    typeof width !== 'number' ||\n    layout === 'fill' ||\n    layout === 'responsive'\n  ) {\n    return { sizes: configDeviceSizes, kind: 'w' }\n  }\n\n  const sizes = [\n    ...new Set(\n      [width, width * 2, width * 3].map(\n        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n      )\n    ),\n  ]\n  return { sizes, kind: 'x' }\n}\n\nfunction computeSrc(\n  src: string,\n  unoptimized: boolean,\n  layout: LayoutValue,\n  width?: number,\n  quality?: number\n): string {\n  if (unoptimized) {\n    return src\n  }\n  const { sizes } = getSizes(width, layout)\n  const largest = sizes[sizes.length - 1]\n  return callLoader({ src, width: largest, quality })\n}\n\ntype CallLoaderProps = {\n  src: string\n  width: number\n  quality?: number\n}\n\nfunction callLoader(loaderProps: CallLoaderProps) {\n  const load = loaders.get(configLoader) || defaultLoader\n  return load({ root: configPath, ...loaderProps })\n}\n\ntype SrcSetData = {\n  src: string\n  unoptimized: boolean\n  layout: LayoutValue\n  width?: number\n  quality?: number\n}\n\nfunction generateSrcSet({\n  src,\n  unoptimized,\n  layout,\n  width,\n  quality,\n}: SrcSetData): string | undefined {\n  // At each breakpoint, generate an image url using the loader, such as:\n  // ' www.example.com/foo.jpg?w=480 480w, '\n  if (unoptimized) {\n    return undefined\n  }\n\n  const { sizes, kind } = getSizes(width, layout)\n  return sizes\n    .map(\n      (size, i) =>\n        `${callLoader({ src, width: size, quality })} ${\n          kind === 'w' ? size : i + 1\n        }${kind}`\n    )\n    .join(', ')\n}\n\ntype PreloadData = {\n  src: string\n  unoptimized: boolean\n  layout: LayoutValue\n  width: number | undefined\n  sizes?: string\n  quality?: number\n}\n\nfunction generatePreload({\n  src,\n  unoptimized = false,\n  layout,\n  width,\n  sizes,\n  quality,\n}: PreloadData): ReactElement {\n  // This function generates an image preload that makes use of the \"imagesrcset\" and \"imagesizes\"\n  // attributes for preloading responsive images. They're still experimental, but fully backward\n  // compatible, as the link tag includes all necessary attributes, even if the final two are ignored.\n  // See: https://web.dev/preload-responsive-images/\n  return (\n    <Head>\n      <link\n        rel=\"preload\"\n        as=\"image\"\n        href={computeSrc(src, unoptimized, layout, width, quality)}\n        // @ts-ignore: imagesrcset and imagesizes not yet in the link element type\n        imagesrcset={generateSrcSet({\n          src,\n          unoptimized,\n          layout,\n          width,\n          quality,\n        })}\n        imagesizes={sizes}\n      />\n    </Head>\n  )\n}\n\nfunction getInt(x: unknown): number | undefined {\n  if (typeof x === 'number') {\n    return x\n  }\n  if (typeof x === 'string') {\n    return parseInt(x, 10)\n  }\n  return undefined\n}\n\nexport default function Image({\n  src,\n  sizes,\n  unoptimized = false,\n  priority = false,\n  loading,\n  className,\n  quality,\n  width,\n  height,\n  ...all\n}: ImageProps) {\n  const thisEl = useRef<HTMLImageElement>(null)\n\n  let rest: Partial<ImageProps> = all\n  let layout: NonNullable<LayoutValue> = sizes ? 'responsive' : 'intrinsic'\n  let unsized = false\n  if ('unsized' in rest) {\n    unsized = Boolean(rest.unsized)\n    // Remove property so it's not spread into image:\n    delete rest['unsized']\n  } else if ('layout' in rest) {\n    // Override default layout if the user specified one:\n    if (rest.layout) layout = rest.layout\n\n    // Remove property so it's not spread into image:\n    delete rest['layout']\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!src) {\n      throw new Error(\n        `Image is missing required \"src\" property. Make sure you pass \"src\" in props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { width, height, quality }\n        )}`\n      )\n    }\n    if (!VALID_LAYOUT_VALUES.includes(layout)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"layout\" property. Provided \"${layout}\" should be one of ${VALID_LAYOUT_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (!VALID_LOADING_VALUES.includes(loading)) {\n      throw new Error(\n        `Image with src \"${src}\" has invalid \"loading\" property. Provided \"${loading}\" should be one of ${VALID_LOADING_VALUES.map(\n          String\n        ).join(',')}.`\n      )\n    }\n    if (priority && loading === 'lazy') {\n      throw new Error(\n        `Image with src \"${src}\" has both \"priority\" and \"loading='lazy'\" properties. Only one should be used.`\n      )\n    }\n    if (unsized) {\n      throw new Error(\n        `Image with src \"${src}\" has deprecated \"unsized\" property, which was removed in favor of the \"layout='fill'\" property`\n      )\n    }\n  }\n\n  let lazy = loading === 'lazy'\n  if (!priority && typeof loading === 'undefined') {\n    lazy = true\n  }\n\n  if (typeof window !== 'undefined' && !window.IntersectionObserver) {\n    // Rendering client side on browser without intersection observer\n    lazy = false\n  }\n\n  useEffect(() => {\n    const target = thisEl.current\n\n    if (target && lazy) {\n      const observer = getObserver()\n\n      if (observer) {\n        observer.observe(target)\n\n        return () => {\n          observer.unobserve(target)\n        }\n      } else {\n        //browsers without intersection observer\n        unLazifyImage(target)\n      }\n    }\n  }, [thisEl, lazy])\n\n  const widthInt = getInt(width)\n  const heightInt = getInt(height)\n  const qualityInt = getInt(quality)\n\n  let wrapperStyle: JSX.IntrinsicElements['div']['style'] | undefined\n  let sizerStyle: JSX.IntrinsicElements['div']['style'] | undefined\n  let sizerSvg: string | undefined\n  let imgStyle: JSX.IntrinsicElements['img']['style'] = {\n    visibility: lazy ? 'hidden' : 'visible',\n\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n\n    boxSizing: 'border-box',\n    padding: 0,\n    border: 'none',\n    margin: 'auto',\n\n    display: 'block',\n    width: 0,\n    height: 0,\n    minWidth: '100%',\n    maxWidth: '100%',\n    minHeight: '100%',\n    maxHeight: '100%',\n  }\n  if (\n    typeof widthInt !== 'undefined' &&\n    typeof heightInt !== 'undefined' &&\n    layout !== 'fill'\n  ) {\n    // <Image src=\"i.png\" width=\"100\" height=\"100\" />\n    const quotient = heightInt / widthInt\n    const paddingTop = isNaN(quotient) ? '100%' : `${quotient * 100}%`\n    if (layout === 'responsive') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"responsive\" />\n      wrapperStyle = {\n        display: 'block',\n        overflow: 'hidden',\n        position: 'relative',\n\n        boxSizing: 'border-box',\n        margin: 0,\n      }\n      sizerStyle = { display: 'block', boxSizing: 'border-box', paddingTop }\n    } else if (layout === 'intrinsic') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"intrinsic\" />\n      wrapperStyle = {\n        display: 'inline-block',\n        maxWidth: '100%',\n        overflow: 'hidden',\n        position: 'relative',\n        boxSizing: 'border-box',\n        margin: 0,\n      }\n      sizerStyle = {\n        boxSizing: 'border-box',\n        display: 'block',\n        maxWidth: '100%',\n      }\n      sizerSvg = `<svg width=\"${widthInt}\" height=\"${heightInt}\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>`\n    } else if (layout === 'fixed') {\n      // <Image src=\"i.png\" width=\"100\" height=\"100\" layout=\"fixed\" />\n      wrapperStyle = {\n        overflow: 'hidden',\n        boxSizing: 'border-box',\n        display: 'inline-block',\n        position: 'relative',\n        width: widthInt,\n        height: heightInt,\n      }\n    }\n  } else if (\n    typeof widthInt === 'undefined' &&\n    typeof heightInt === 'undefined' &&\n    layout === 'fill'\n  ) {\n    // <Image src=\"i.png\" layout=\"fill\" />\n    wrapperStyle = {\n      display: 'block',\n      overflow: 'hidden',\n\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n\n      boxSizing: 'border-box',\n      margin: 0,\n    }\n  } else {\n    // <Image src=\"i.png\" />\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Image with src \"${src}\" must use \"width\" and \"height\" properties or \"layout='fill'\" property.`\n      )\n    }\n  }\n\n  // Generate attribute values\n  const imgSrc = computeSrc(src, unoptimized, layout, widthInt, qualityInt)\n  const imgSrcSet = generateSrcSet({\n    src,\n    unoptimized,\n    layout,\n    width: widthInt,\n    quality: qualityInt,\n  })\n\n  let imgAttributes:\n    | {\n        src: string\n        srcSet?: string\n      }\n    | {\n        'data-src': string\n        'data-srcset'?: string\n      }\n  if (!lazy) {\n    imgAttributes = {\n      src: imgSrc,\n    }\n    if (imgSrcSet) {\n      imgAttributes.srcSet = imgSrcSet\n    }\n  } else {\n    imgAttributes = {\n      'data-src': imgSrc,\n    }\n    if (imgSrcSet) {\n      imgAttributes['data-srcset'] = imgSrcSet\n    }\n    className = className ? className + ' __lazy' : '__lazy'\n  }\n\n  // No need to add preloads on the client side--by the time the application is hydrated,\n  // it's too late for preloads\n  const shouldPreload = priority && typeof window === 'undefined'\n\n  if (unsized) {\n    wrapperStyle = undefined\n    sizerStyle = undefined\n    imgStyle = undefined\n  }\n  return (\n    <div style={wrapperStyle}>\n      {shouldPreload\n        ? generatePreload({\n            src,\n            layout,\n            unoptimized,\n            width: widthInt,\n            sizes,\n            quality: qualityInt,\n          })\n        : null}\n      {sizerStyle ? (\n        <div style={sizerStyle}>\n          {sizerSvg ? (\n            <img\n              style={{ maxWidth: '100%', display: 'block' }}\n              alt=\"\"\n              aria-hidden={true}\n              role=\"presentation\"\n              src={`data:image/svg+xml;charset=utf-8,${sizerSvg}`}\n            />\n          ) : null}\n        </div>\n      ) : null}\n      <img\n        {...rest}\n        {...imgAttributes}\n        decoding=\"async\"\n        className={className}\n        sizes={sizes}\n        ref={thisEl}\n        style={imgStyle}\n      />\n    </div>\n  )\n}\n\n//BUILT IN LOADERS\n\ntype LoaderProps = CallLoaderProps & { root: string }\n\nfunction normalizeSrc(src: string) {\n  return src[0] === '/' ? src.slice(1) : src\n}\n\nfunction imgixLoader({ root, src, width, quality }: LoaderProps): string {\n  // Demo: https://static.imgix.net/daisy.png?format=auto&fit=max&w=300\n  const params = ['auto=format', 'fit=max', 'w=' + width]\n  let paramsString = ''\n  if (quality) {\n    params.push('q=' + quality)\n  }\n\n  if (params.length) {\n    paramsString = '?' + params.join('&')\n  }\n  return `${root}${normalizeSrc(src)}${paramsString}`\n}\n\nfunction akamaiLoader({ root, src, width }: LoaderProps): string {\n  return `${root}${normalizeSrc(src)}?imwidth=${width}`\n}\n\nfunction cloudinaryLoader({ root, src, width, quality }: LoaderProps): string {\n  // Demo: https://res.cloudinary.com/demo/image/upload/w_300,c_limit/turtles.jpg\n  const params = ['f_auto', 'c_limit', 'w_' + width]\n  let paramsString = ''\n  if (quality) {\n    params.push('q_' + quality)\n  }\n  if (params.length) {\n    paramsString = params.join(',') + '/'\n  }\n  return `${root}${paramsString}${normalizeSrc(src)}`\n}\n\nfunction defaultLoader({ root, src, width, quality }: LoaderProps): string {\n  if (process.env.NODE_ENV !== 'production') {\n    const missingValues = []\n\n    // these should always be provided but make sure they are\n    if (!src) missingValues.push('src')\n    if (!width) missingValues.push('width')\n\n    if (missingValues.length > 0) {\n      throw new Error(\n        `Next Image Optimization requires ${missingValues.join(\n          ', '\n        )} to be provided. Make sure you pass them as props to the \\`next/image\\` component. Received: ${JSON.stringify(\n          { src, width, quality }\n        )}`\n      )\n    }\n\n    if (src && !src.startsWith('/') && configDomains) {\n      let parsedSrc: URL\n      try {\n        parsedSrc = new URL(src)\n      } catch (err) {\n        console.error(err)\n        throw new Error(\n          `Failed to parse \"${src}\" in \"next/image\", if using relative image it must start with a leading slash \"/\" or be an absolute URL (http:// or https://)`\n        )\n      }\n\n      if (!configDomains.includes(parsedSrc.hostname)) {\n        throw new Error(\n          `Invalid src prop (${src}) on \\`next/image\\`, hostname \"${parsedSrc.hostname}\" is not configured under images in your \\`next.config.js\\`\\n` +\n            `See more info: https://err.sh/nextjs/next-image-unconfigured-host`\n        )\n      }\n    }\n  }\n\n  return `${root}?url=${encodeURIComponent(src)}&w=${width}&q=${quality || 75}`\n}\n"]},"metadata":{},"sourceType":"script"}